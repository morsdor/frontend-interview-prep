import { Question } from "@/types";


export const javascriptQuestions: Question[] = [
  {
    id: 'flatten-array',
    title: 'Flatten Array',
    description: 'Write a function that flattens a nested array. The function should handle multiple levels of nesting.',
    difficulty: 'beginner',
    category: 'Arrays',
    tags: ['arrays', 'recursion'],
  },
  {
    id: 'debounce-function',
    title: 'Debounce Function',
    description: 'Implement a debounce function that delays invoking a function until after wait milliseconds have elapsed since the last time the debounced function was invoked.',
    difficulty: 'intermediate',
    category: 'Functions',
    tags: ['functions', 'timing', 'performance'],
  },
  {
    id: 'deep-clone-object',
    title: 'Deep Clone Object',
    description: 'Write a function that deep clones an object. The function should handle nested objects and arrays.',
    difficulty: 'beginner',
    category: 'Objects',
    tags: ['objects', 'cloning', 'deep-copy'],
  },
  {
    id: 'memoization',
    title: 'Memoization',
    description: 'Implement memoization for a function to optimize repeated function calls with the same arguments.',
    difficulty: 'intermediate',
    category: 'Functions',
    tags: ['functions', 'performance', 'optimization'],
  },
  {
    id: 'promisify',
    title: 'Promisify',
    description: 'Implement a promisify function that converts a callback-based function to a function that returns a Promise.',
    difficulty: 'intermediate',
    category: 'Functions',
    tags: ['functions', 'promises', 'callback'],
  },
  {
    id: 'deep-equality',
    title: 'Deep Equality Check',
    description: 'Write a function that checks if two values are deeply equal. It should compare objects, arrays, primitives, and handle nested structures.',
    difficulty: 'beginner',
    category: 'Objects',
    tags: ['objects', 'equality', 'deep-comparison'],
  },
  {
    id: 'clone-graph',
    title: 'Clone Graph',
    description: 'Implement a function to clone a graph (handle cycles). Each node has a val and neighbors array.',
    difficulty: 'intermediate',
    category: 'Graphs',
    tags: ['graphs', 'cloning', 'cyclic-structure'],
  },
  {
    id: "throttle-function",
    title: "Throttle Function",
    description: "Implement a throttle function that limits the rate at which a function can be called.",
    difficulty: "intermediate",
    category: "Functions",
    tags: ["functions", "timing", "performance"],
  },
  {
    id:"currying",
    title:"Currying",
    description:"Implement a currying function that transforms a function with multiple arguments into a sequence of functions, each with a single argument.",
    difficulty:"intermediate",
    category:"Functions",
    tags:["functions","currying","functional-programming"],
  },
  {
    id:"compose-functions",
    title:"Compose Functions",
    description:"Implement a compose function that composes multiple functions into a single function.",
    difficulty:"intermediate",
    category:"Functions",
    tags:["functions","composition","functional-programming"],
  },
  {
    id:"event-emitter",
    title:"Event Emitter",
    description:"Implement an event emitter that allows for event registration, emission, and removal.",
    difficulty:"intermediate",
    category:"Events",
    tags:["events","emitter","event-handling"],
  },
  {
    id:'lru-cache',
    title:'LRU Cache',
    description:'Implement an LRU cache that stores a limited number of key-value pairs and evicts the least recently used items when the cache is full.',
    difficulty:'intermediate',
    category:'Caching',
    tags:['caching','lru-cache','data-structures'],
  },
  {
    id:"anagrams-in-string",
    title:"Anagrams in String",
    description:"Implement a function to find all anagrams of a pattern in a string.",
    difficulty:"intermediate",
    category:"Strings",
    tags:["strings","anagrams","pattern-matching"],
  },
  {
    id:"binary-search-tree",
    title:"Binary Search Tree",
    description:"Implement a binary search tree with insert, delete, and search operations.",
    difficulty:"intermediate",
    category:"Trees",
    tags:["trees","binary-search-tree","data-structures"],
  },
  {
    id:"debounce-immediate-cancel",
    title:"Debounce with Immediate and Cancel Options",
    description:"Implement a debounce function with immediate and cancel options.",
    difficulty:"intermediate",
    category:"Functions",
    tags:["functions","timing","performance"],
  },
  {
    id:"deep-freeze-object",
    title:"Deep Freeze Object",
    description:"Implement a deep freeze function that freezes an object and all its properties.",
    difficulty:"intermediate",
    category:"Objects",
    tags:["objects","freezing","deep-freeze"],
  },
  {
    id:"function-rate-limiter",
    title:"Function Rate Limiter",
    description:"Implement a function rate limiter that limits the rate at which a function can be called.",
    difficulty:"intermediate",
    category:"Functions",
    tags:["functions","rate-limiting","performance"],
  },
  {
    id:"group-by",
    title:"Group By",
    description:"Implement a group by function that groups an array of objects by a specified key.",
    difficulty:"intermediate",
    category:"Arrays",
    tags:["arrays","grouping","data-structures"],
  },
  {
    id:"immutable-updated-nested-object",
    title:"Immutable Updated Nested Object",
    description:"Implement a function to update a nested object immutably.",
    difficulty:"intermediate",
    category:"Objects",
    tags:["objects","immutability","deep-update"],
  },
  {
    id:"priority-queue",
    title:"Priority Queue",
    description:"Implement a priority queue with insert, delete, and search operations.",
    difficulty:"intermediate",
    category:"Queues",
    tags:["queues","priority-queue","data-structures"],
  },
  {
    id:"promise-all-polyfill",
    title:"Promise All Polyfill",
    description:"Implement a promise all polyfill that returns a promise that resolves when all of the promises in the array have resolved or rejects if any of the promises reject.",
    difficulty:"intermediate",
    category:"Promises",
    tags:["promises","polyfill","promise-all"],
  },
  {
    id:"promise-retry-wrapper",
    title:"Promise Retry Wrapper",
    description:"Implement a promise retry wrapper that retries a promise-returning function up to a specified number of times.",
    difficulty:"intermediate",
    category:"Promises",
    tags:["promises","retry","wrapper"],
  },
  {
    id:"pub-sub",
    title:"Pub-Sub Pattern",
    description:"Implement a pub-sub pattern that allows for event registration, emission, and removal.",
    difficulty:"intermediate",
    category:"Events",
    tags:["events","pub-sub","event-handling"],
  },
  {
    id:"safe-get-nested-object",
    title:"Safe Get Nested Object",
    description:"Implement a function to safely retrieve a nested object property.",
    difficulty:"intermediate",
    category:"Objects",
    tags:["objects","safe-get","deep-get"],
  },
  {
    id:"serialize-binary-tree",
    title:"Serialize Binary Tree",
    description:"Implement a function to serialize a binary tree to a string and deserialize it back to a binary tree.",
    difficulty:"intermediate",
    category:"Trees",
    tags:["trees","binary-tree","serialization"],
  },
  {
    id:"task-scheduler",
    title:"Task Scheduler",
    description:"Implement a task scheduler that schedules tasks to run at a specified time.",
    difficulty:"intermediate",
    category:"Tasks",
    tags:["tasks","scheduler","time-scheduling"],
  },
  {
    id:"use-previous-hook",
    title:"Use Previous Hook",
    description:"Implement a custom hook that returns the previous value of a variable.",
    difficulty:"intermediate",
    category:"Hooks",
    tags:["hooks","previous-value","custom-hook"],
  }

];

// Create a map for easy lookup by ID
export const questionsMap = javascriptQuestions.reduce<Record<string, Question>>(
  (acc, question) => {
    acc[question.id] = question;
    return acc;
  },
  {}
);

// Export categories and difficulties for filtering
export const categories = Array.from(new Set(javascriptQuestions.map(q => q.category))).sort();
export const difficulties = Array.from(new Set(javascriptQuestions.map(q => q.difficulty)));
